// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	OpenIdScopes = "OpenId.Scopes"
)

// Migration response.
type Migration struct {
	// The timestamp the migration was created
	CreatedAt time.Time `json:"created_at"`

	// A description of the migration, with some background.
	Description *string `json:"description,omitempty"`

	// Migration identifier.
	Id string `json:"id"`

	// Labels assigned to an entity.
	Labels []string `json:"labels"`

	// The name of the migration.
	Name string `json:"name"`

	// The timestamp the migration was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// Migration page response.
type MigrationsPage struct {
	Migrations []Migration `json:"migrations"`
}

// New Migration request.
type NewMigration struct {
	// The AAD Contributor Group
	Contributorgroup *string `json:"contributorgroup,omitempty"`

	// A description of the customer, with some background.
	Description *string `json:"description,omitempty"`

	// Labels assigned to an entity.
	Labels []string `json:"labels"`

	// The AAD Manager Group
	Managergroup *string `json:"managergroup,omitempty"`

	// The name of the customer.
	Name string `json:"name"`
}

// Limit defines model for limit.
type Limit = int64

// Offset defines model for offset.
type Offset = int64

// Q defines model for q.
type Q = string

// MigrationParams defines parameters for Migration.
type MigrationParams struct {
	// Used to query by name in a list operation.
	Q *Q `form:"q,omitempty" json:"q,omitempty"`

	// Used to request the next page in a list operation.
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// Used to specify the maximum number of records which are returned in the next page.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// ExecuteMigrationJSONBody defines parameters for ExecuteMigration.
type ExecuteMigrationJSONBody = NewMigration

// NewMigrationJSONBody defines parameters for NewMigration.
type NewMigrationJSONBody = NewMigration

// ExecuteMigrationJSONRequestBody defines body for ExecuteMigration for application/json ContentType.
type ExecuteMigrationJSONRequestBody = ExecuteMigrationJSONBody

// NewMigrationJSONRequestBody defines body for NewMigration for application/json ContentType.
type NewMigrationJSONRequestBody = NewMigrationJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of migrations.
	// (GET /migrate)
	Migration(ctx echo.Context, params MigrationParams) error
	// Run a migration.
	// (POST /migrate)
	ExecuteMigration(ctx echo.Context) error
	// Create a migration.
	// (PUT /migrate)
	NewMigration(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Migration converts echo context to params.
func (w *ServerInterfaceWrapper) Migration(ctx echo.Context) error {
	var err error

	ctx.Set(OpenIdScopes, []string{"migrator/migrate.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params MigrationParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Migration(ctx, params)
	return err
}

// ExecuteMigration converts echo context to params.
func (w *ServerInterfaceWrapper) ExecuteMigration(ctx echo.Context) error {
	var err error

	ctx.Set(OpenIdScopes, []string{"migrator/migrate.write"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExecuteMigration(ctx)
	return err
}

// NewMigration converts echo context to params.
func (w *ServerInterfaceWrapper) NewMigration(ctx echo.Context) error {
	var err error

	ctx.Set(OpenIdScopes, []string{"migrator/migrate.write"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NewMigration(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/migrate", wrapper.Migration)
	router.POST(baseURL+"/migrate", wrapper.ExecuteMigration)
	router.PUT(baseURL+"/migrate", wrapper.NewMigration)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWWXPbNhD+Kxi0D+0MI9rO0VZPdezUTRvHru30SjUdiFyKSIjDi6VkNaP/3gFIiaRJ",
	"2XLGfesbQezxYb+9PvHEKGs0aHJ8/IlbgUIBAYZTIZUk/5GCS1BakkbzMX/nIGVkmLOQyGzJKAemxI1U",
	"pWK6VFNAZjKGkBhMHVvkMsmZQGAIVKKGlEkddDTcELNiBiMecektX5eASx5xLRTwce0/4i7JQYkKSCbK",
	"gvj4+V7EM4NKEB9zqenFMx5xWlqojjAD5KtVxE2WObjjDQjXJTjq4vEABSukI2YsoPA62zDWDgZB7ojx",
	"eju84IxNl8x7ewis62FEvEHgCKWe8ZVHUEkGzk/lrLLcB7W5YgjOGu0CcRY9GJIQ1BMEQZD+LQZifpUD",
	"I6nAkVC2ypqNxYVwrNblrailguCJ1+njjrrWbzs7ZK2zz8eOv4gtJOXMGQVsKpKPMzSlTkdDXmR6VyRk",
	"CppkJgG9MtwIZQuvv7d/8PTZ8xfffPvd4cuj41c/nPz408+nb89/ubi8+vW33//4c8hTIaZQuL63N+E/",
	"E87Jma7yQmjm/dIy8E+gglrPYv1DIIqlP1fJMcRLyK/bUeo+6S0sWJMdA/hLm34294VwxGoDOybAKuK+",
	"eiVCysfvPU/1AzeRjNrp2ME32Vgz0w+QkIe/eZs7FzO4i/TQI7bXwOZl4bRh50uEjI/5F3HTcuO68OIm",
	"rj3Wbj2zZXyyijwpd1Rsh7J1rxsoWqMJ5bQkg74Q7DB9h4fH7KiRZCdBtJ0hJy/fsIuzN+z1FTuG+Zl1",
	"7ByND29b73EqOSkdGQX4gEL+78tLCS1mcF8MTyupB8Wv1hl61m41vY5Xv6SP6pt7C6xbW5MwNyApUdLy",
	"0qdxlUtnhyXlB/4rK8wi/BIl5QblPyELj0wKvZ/vsOBjnhNZN47jGt8oMSo2Xi5eC0OYasZWrkSqwug7",
	"QaHJMZEk4Fygz180M9I3AgSRNqL+VMvziC9QEjSX4bi+9Sybj3AvwiAUQrbuKyLEIYxXqTOzrjORhO4I",
	"SkhvUegUYTFaCEwPvndJjiYFdN5wM8svySCww/PXvod1cKQwN9Y9qXqCwVHHQCys7BUXv8ql87YYaDEt",
	"wDFHZZaN/godHVC5s+wScC4TaPkh4+Jw6YUkhdw5rZ3WwOaArvKwP9rzbo0F7RGM+dPR3ujANx1BeSAu",
	"rgCHPJgNbWcXYVPcLDtZMyycT+ANs6/Tdl8OLpr99f1wy21E4mu+iu4Vqhe8HSSrdXU18dlWzYbw2oO9",
	"vTX5oMNjhbWFTALm+IOrel6zrO00J6oZFbKrGzrVW9J4u1JDWM4shNCtp4nBNSOjUCcT/wZXKiVw6esC",
	"aCsVJGauMQRhJlnjBjh9dQNJ6QurNfm/Ejqt176v+8TWGm1+6xH20qTLR4tpZ4Suul2PsIRVj8/9x+dz",
	"O5Ww3os/j9Cqud1i9KLUbR62ElkO8HgU0NxW7zLXCen/rD0Sa8OR7xO3iyNbLRZVvUf9/xWAaEuDiO5G",
	"DDhfd+BubI5hDoWxCjSxSuqBI22+z1eT1b8BAAD//5Da0dK2EAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
